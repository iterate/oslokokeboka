# Deploys a new Namespace for the MinIO Pod
apiVersion: v1
kind: Namespace
metadata:
  name: minio-dev # Change this value if you want a different namespace name
  labels:
    name: minio-dev # Change this value to match metadata.name
---
# Deploys a new MinIO Pod into the metadata.namespace Kubernetes namespace
#
# The `spec.containers[0].args` contains the command run on the pod
# The `/data` directory corresponds to the `spec.containers[0].volumeMounts[0].mountPath`
# That mount path corresponds to a Kubernetes HostPath which binds `/data` to a local drive or volume on the worker node where the pod runs
#
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: minio
  name: minio
  namespace: minio-dev # Change this value to match the namespace metadata.name
spec:
  containers:
    - name: minio
      env:
        - name: MINIO_SERVER_URL
          value: http://storage.localhost
        - name: MINIO_BROWSER_REDIRECT_URL
          value: http://storage-console.localhost/login
        - name: MINIO_ACCESS_KEY
          value: "minio"
        - name: MINIO_SECRET_KEY
          value: "minio123"
      image: quay.io/minio/minio:RELEASE.2023-02-27T18-10-45Z
      command:
        - /bin/bash
        - -c
      args:
        - minio server /data --console-address :9090
      volumeMounts:
        - mountPath: /data
          name: localvolume # Corresponds to the `spec.volumes` Persistent Volume
      ports:
        - containerPort: 9000
      # Readiness probe detects situations when MinIO server instance
      # is not ready to accept traffic. Kubernetes doesn't forward
      # traffic to the pod while readiness checks fail.
      # readinessProbe:
      #   httpGet:
      #     path: /minio/health/ready
      #     port: 9000
      #   initialDelaySeconds: 120
      #   periodSeconds: 20
  nodeSelector:
    kubernetes.io/hostname: k3d-local-server-0 # Specify a node label associated to the Worker Node on which you want to deploy the pod.
  volumes:
    - name: localvolume
      hostPath: # MinIO generally recommends using locally-attached volumes
        path: /mnt/disk1/data # Specify a path to a local drive or volume on the Kubernetes worker node
        type: DirectoryOrCreate # The path to the last directory must exist

---
apiVersion: v1
kind: Service
metadata:
  name: object-storage
  namespace: minio-dev
spec:
  type: ClusterIP
  ports:
    - name: minio
      port: 9000
      targetPort: 9000
      protocol: TCP
    - name: console
      port: 9090
      targetPort: 9090
      protocol: TCP
  selector:
    # Looks for labels `app:minio` in the namespace and applies the spec
    app: minio
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: object-storage-ingress
  namespace: minio-dev
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: "storage.localhost"
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: object-storage
                port:
                  number: 9000
    - host: "storage-console.localhost"
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: object-storage
                port:
                  number: 9090
